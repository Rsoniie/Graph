*****************USING DISJOINT FUNCTION********TC = O(NLOGN) ********SC = O(N)***************


# include<bits/stdc++.h>
bool comp(vector<int>&a, vector<int>&b)
{
    return a[2] < b[2];
}
void makeset(vector<int>&par, vector<int>&rank, int n)
{
  for(int i=0;i<n;i++)
  {
    par[i] = i;
    rank[i] = 0;
  }
}

int findpar(vector<int>&par, int node)
{
  if(par[node] == node)
  {
    return node;
  }
  return par[node] = findpar(par, par[node]);
}

void unionset(int u, int v, vector<int>&par, vector<int>&rank)
{
  u = findpar(par, u);
  v = findpar(par, v);

  if(rank[u] < rank[v])
  {
    par[u] = v;

  }
  else if(rank[v] < rank[u] )
  {
    par[v] = u;
  }
  else 
  {
    par[v] = u;
    rank[u]++;
  }

}
int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
    sort(edges.begin(), edges.end(), comp);
    vector<int> par(n);
    vector<int> rank(n);
    makeset(par, rank, n);
    // for krushal algo we have to put weight and then edges
    int ans = 0;
    for(int i=0;i<edges.size();i++)
    {
      int u = findpar(par, edges[i][0]);
      int v = findpar(par, edges[i][1]);
      int wt = edges[i][2];
      if(u != v)
      {
         ans+=wt;
         unionset(u, v, par, rank);
      }
    }

    return ans;


}
