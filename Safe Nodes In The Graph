*****USING DFS TRAVERSAL TC=O(N*M) ********SC = O(N) ****************


#include <bits/stdc++.h> 
bool dfs(int node, vector<int>&vis, vector<int>&pvis, vector<int>&ans, vector<int> adj[])
{
    vis[node] = 1;
    pvis[node] = 1;
    ans[node] = 0;
    for(auto i:adj[node])
    {
        if(!vis[i])
        {
            if(dfs(i, vis, pvis, ans, adj) == true)
            {
                ans[node] = 0;
                return true;
            }
        }
        else if(pvis[i])
        {
            ans[node] = 0;
            return true;
        }
    }

    ans[node] = 1;
    pvis[node] = 0;
    return false;
}
vector<int> safeNodes(vector<vector<int>> &edges, int n, int e) {

    vector<int> adj[n];
    for(int i=0;i<edges.size();i++)
    {
        int a = edges[i][0];
        int b = edges[i][1];
        adj[a].push_back(b);
    }
    vector<int> vis(n, 0);
    vector<int> pvis(n, 0);
    vector<int> ans(n, 0);
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
        {
            dfs(i, vis, pvis, ans, adj);
        }
    }

    vector<int> res;
    for(int i=0;i<n;i++)
    {
        if(ans[i] == 1)
        {
            res.push_back(i);
        }
    }

    return res;


---------------------------------------------------------------------

***********USING TOPO SORT*********TC=O(V+E+VLOGV)**SC=O(V+V+v)****************

#include <bits/stdc++.h> 

vector<int> safeNodes(vector<vector<int>> &edges, int n, int e) {

    vector<int> adj[n];
    vector<int> adjrev[n];
    for(int i=0;i<edges.size();i++)
    {
        int a = edges[i][0];
        int b = edges[i][1];
        adj[a].push_back(b);
    }
    vector<int> ind(n, 0);
    for(int i=0;i<n;i++)
    {
        for(auto it:adj[i])
        {
            adjrev[it].push_back(i);
            ind[i]++;
        }
    }

    queue<int> q;

    for(int i=0;i<n;i++)
    {
        if(ind[i] == 0)
        {
            q.push(i);
        }
    }

    vector<int> ans;
    int cnt=0;
    while(!q.empty())
    {
        int node = q.front();
        q.pop();
        cnt++;
        ans.push_back(node);

        for(auto i:adjrev[node])
        {
            ind[i]-- ;
            if(ind[i] == 0)
            {
                q.push(i);
            }
        }
    }

    sort(ans.begin(), ans.end());
    return ans;



}


}
