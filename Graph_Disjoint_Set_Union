***********WE CAN SAY THAT THIS IS A DIFFERENT DATA STRUCTURE************FIND RELATION BETWEEN ANY TWO COMPONENTS WITHIN CONSTANT TIME COMPLEXITY*********
# include<bits/stdc++.h>
using namespace std;
class Disjointset {
    vector<int> rank, par;
    public:
    Disjointset(int n)
    {
        rank.resize(n+1, 0);
        par.resize(n+1);
        for(int i=0;i<=n;i++)
        {
            par[i] = i;
        }
    }

    int findup(int node)
    {
        if(node == par[node])
        {
            return node;
        }

        return  par[node] = findup(par[node]);
    }
    void unionbyrank(int u, int v)
    {
        int up_u = findup(u);
        int up_v = findup(v);
        if(up_u == up_v)
        {
            return ;
        }

        if(rank[up_u] < rank[up_v])
        {
            par[up_u] = up_v;
        }
        else if(rank[up_v] < rank[up_u])
        {
            par[up_v] = up_u;
        }

        else 
        {
            par[up_v] = up_u;
            rank[up_u]++;
        }


    }
    
};
int main()
{
   Disjointset ds(7);
   ds.unionbyrank(1,2);
   ds.unionbyrank(2,3);
   ds.unionbyrank(4,5);
   ds.unionbyrank(6,7);
   ds.unionbyrank(5,6);
   if(ds.findup(3) == ds.findup(7))
   {
    cout<<"Same"<<endl;
   }
   else{
    cout<<"No"<<endl;
   }
   ds.unionbyrank(3,7);
    if(ds.findup(3) == ds.findup(7))
   {
    cout<<"Same"<<endl;
   }
   else{
    cout<<"No"<<endl;
   }
}
