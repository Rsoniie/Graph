***************USING PRIORITY_QUEUE(MIN HEAP) *******TC = O(ELOGV) ******SC = O(V) *********FOR ONLY POSITIVE WEIGHTS***
#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    vector<pair<int, int> > adj[vertices];
    for(int i=0;i<edges;i++)
    {
        int a = vec[i][0];
        int b = vec[i][1];
        int wt = vec[i][2];
        adj[a].push_back({b, wt});
        adj[b].push_back({a, wt});
    }

    priority_queue<pair<int, int>, vector<pair<int, int>> , greater<pair<int,int>>> pq;  
    vector<int> dis(vertices);
    for(int i=0;i<vertices;i++)
    {
        dis[i] = INT_MAX;
    }
    dis[source] = 0;
    pq.push({0, source});
    while(!pq.empty())
    {
        int dist = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        for(auto i:adj[node])
        {
            int ndis = i.second;
            int nnode = i.first;
            if(dist + ndis < dis[nnode])
            {
                dis[nnode] = dist+ndis;
                pq.push({dis[nnode], nnode});
            }
         

        }
        
    }

    return dis;

}
