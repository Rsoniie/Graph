**********USING BFS TRAVERSAL ******TC = O(4*N*M) *****SC = O(N*M)************
# include<bits/stdc++.h>
int minTimeToRot(vector<vector<int>>& grid, int n, int m)
{
    vector<vector<int>> vis(n, vector<int>(m, 0));
    queue<pair<pair<int, int>, int>> q;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(grid[i][j] == 2)
            {
                vis[i][j] = 2;
                q.push({{i, j}, 0});
            }
        }
    } 

    int delrow[] = {0, 1, -1, 0};
    int delcol[] = {1, 0, 0, -1};
    int tm = 0;

    while(!q.empty())
    {
        int r = q.front().first.first;
        int c = q.front().first.second;
        int t = q.front().second;
        tm = max(tm, t);
        q.pop();

        for(int i=0;i<4;i++)
        {
            int nr = r+delrow[i];
            int nc = c+delcol[i];
            if(nr < n && nr >=0 && nc < m && nc >=0 && vis[nr][nc] != 2 && grid[nr][nc] == 1)
            {
                 q.push({{nr, nc}, t+1});
                 vis[nr][nc] = 2;
            }
        }
    }

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(grid[i][j] == 1 && vis[i][j] != 2)
            {
                return -1;
            }
        }
    }

    return tm;

    
}

------------------------------------------------------------------------------
******WITH SOME BASIC OPTIMISATION******************************
# include<bits/stdc++.h>
int minTimeToRot(vector<vector<int>>& grid, int n, int m)
{
    vector<vector<int>> vis(n, vector<int>(m, 0));
    queue<pair<pair<int, int>, int>> q;
    int cf=0;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(grid[i][j] == 2)
            {
                vis[i][j] = 2;
                q.push({{i, j}, 0});
            }
            if(grid[i][j] ==1)
            {
                cf++;
            }
        }
    } 

    int delrow[] = {0, 1, -1, 0};
    int delcol[] = {1, 0, 0, -1};
    int tm = 0;
  int cf2=0;
    while(!q.empty())
    {
        int r = q.front().first.first;
        int c = q.front().first.second;
        int t = q.front().second;
        tm = max(tm, t);
        q.pop();

        for(int i=0;i<4;i++)
        {
            int nr = r+delrow[i];
            int nc = c+delcol[i];
            if(nr < n && nr >=0 && nc < m && nc >=0 && vis[nr][nc] != 2 && grid[nr][nc] == 1)
            {
                cf2++;
                 q.push({{nr, nc}, t+1});
                 vis[nr][nc] = 2;
            }
        }
    }


    if(cf != cf2)
    {
        return -1;
    }

    return tm;

    
}
