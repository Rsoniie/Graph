********USING TOPO SORT******TC = O(N+E) *****SC = O(N+N)***********
//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
class Solution {
    private:
    void topo(int node, vector<pair<int, int>> adj[], vector<int> &vis, stack<int> &st)
    {
        vis[node] = 1;
        for(auto i:adj[node])
        {
    
            if(!vis[i.first])
            {
                topo(i.first, adj, vis, st);
            }
        }
        
        st.push(node);
    }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int, int>> adj[N];
        for(int i=0;i<M;i++)
        {
            int a = edges[i][0];
            int b = edges[i][1];
            int wt = edges[i][2];
            adj[a].push_back({b, wt});
        }
        
        stack<int> st;
        vector<int> vis(N, 0);
        for(int i=0;i<N;i++)
        {
            if(!vis[i])
            {
                topo(i, adj, vis, st);
            }
        }
        
        vector<int> dis(N, 1e9);
        dis[0] = 0;
        while(!st.empty())
        {
            int node = st.top();
            st.pop();
            for(auto i:adj[node])
            {
                int a = i.first;
                int b = i.second;
                if(dis[node] + b < dis[a])
                {
                    dis[a] = dis[node]+b;
                }
            }
        }
        for(int i=0;i<dis.size();i++)
        {
            if(dis[i] == 1e9)
            {
                dis[i] = -1;
            }
        }
        
        return dis;
    }
    
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for(int i=0; i<m; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends










