**********USIGN KJISTRA ALGORITHM TC = O(N*M) SC =O(2*N*M) *********

# include<bits/stdc++.h>
int shortestPathBinaryMatrix(vector<vector<int>> &matrix, pair<int, int> src, pair<int, int> dest)
{
      if(src.first == dest.first && src.second == dest.second && matrix[src.first][src.second] == 1)
      {
          return 0;
      }
      if(matrix[src.first][src.second] == 0 || matrix[dest.first][dest.second] == 0)
      {
          return -1;
      }
       queue<pair<int, pair<int, int>>> q;
       int n = matrix.size();
       int m = matrix[0].size();
       vector<vector<int>> dis(n, vector<int>(m, 1e9));
       dis[src.first][src.second] = 0;
       q.push({0, {src.first, src.second}});
       int delrow[] = { 1, 0, -1, 0};
       int delcol[] = {0, 1, 0, -1};
       while(!q.empty())
       {
           int dist = q.front().first;
           int r = q.front().second.first;
           int c = q.front().second.second;
           q.pop();
           for(int i=0;i<4;i++)
           {
               int nr = r+delrow[i];
               int nc = c+delcol[i];
               if(nr < n && nr >=0 && nc < m && nc >=0 && matrix[nr][nc] == 1 && dist+1 < dis[nr][nc])
               {
                   dis[nr][nc] = 1+dist;
                   if(nr == dest.first && nc == dest.second)
                   {
                       return 1+dist;
                   }
                   q.push({1+dist,{nr, nc}});
               } 

           }
       }

       return -1;

}
