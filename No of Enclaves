********USING DFS****TC=O(N*M) *******SC=O(N*M)************

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
    private:
    void dfs(int r, int c, vector<vector<int>> &vis, vector<vector<int>> &grid, int delrow[], int delcol[])
    {
        vis[r][c] = 1;
        int n = grid.size();
        int m = grid[0].size();
        for(int i=0;i<4;i++)
        {
            int nr = r+delrow[i];
            int nc = c+delcol[i];
            if(nr >=0 && nr < n && nc >=0 && nc < m && !vis[nr][nc] && grid[nr][nc] == 1)
            {
                dfs(nr, nc, vis, grid, delrow, delcol);
            }
        }
    }
  public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int n = grid.size();
        int m  = grid[0].size();
        int delrow[] = {1, 0, -1, 0};
        int delcol[] = {0, 1, 0, -1};
        vector<vector<int>> vis(n, vector<int>(m, 0));
        // for first row
        for(int i=0;i<m;i++)
        {
            if(!vis[0][i] && grid[0][i] == 1)
            {
                dfs(0, i, vis, grid, delrow, delcol);
            }
            if(!vis[n-1][i] && grid[n-1][i] == 1)
            {
                dfs(n-1, i, vis, grid, delrow, delcol);
            }
        }
        
       /* for(auto i:vis)
        {
            for(auto j:i)
            {
                cout<<j<<" ";
            }
            cout<<endl;
        }*/
        
        for(int i=0;i<n;i++)
        {
            if(!vis[i][0] && grid[i][0]==1)
            {
                dfs(i, 0, vis, grid, delrow, delcol);
            }
            if(!vis[i][m-1] && grid[i][m-1] == 1)
            {
                dfs(i, m-1, vis, grid, delrow, delcol);
            }
        }
        
        int cnt=0;
        
      /* for(auto i:vis)
        {
            for(auto j:i)
            {
                cout<<j<<" ";
            }
            cout<<endl;
        }*/
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == 1 && !vis[i][j])
                {
                    cnt++;
                }
            }
        }
        
        return cnt;
        
        
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.numberOfEnclaves(grid) << endl;
    }
}
// } Driver Code Ends


**************USING BFS TRAVERSAL****************

//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
        queue<pair<int, int>> q;
        int n = grid.size();
        int m = grid[0].size();
        int vis[n][m]={0};
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i == 0 || i == n-1 || j == 0 || j == m-1)
                {
                    if(grid[i][j] == 1)
                    {
                    vis[i][j] = 1;
                    q.push({i, j});
                    }
                }
            }
        }
        
        int delrow[] = {1,0,-1,0};
        int delcol[] = {0,1,0,-1};
        while(!q.empty())
        {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
           // vis[row][col] = 1;
            for(int i=0;i<4;i++)
            {
                int nrow = row+delrow[i];
                int ncol = col+delcol[i];
                if(nrow < n && nrow >=0 && ncol < m && ncol >=0  && !vis[nrow][ncol] && grid[nrow][ncol] == 1)
                {
                    vis[nrow][ncol] = 1;
                    q.push({nrow, ncol});
                }
            }
        }
        
       int cnt=0;
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<m;j++)
           {
               if(!vis[i][j] && grid[i][j]==1)
               {
                   cnt++;
               }
           }
       }
       
       return cnt;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.numberOfEnclaves(grid) << endl;
    }
}
// } Driver Code Ends
