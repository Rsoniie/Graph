***********USING DJISKTRA ALGORITHM********TC = O(ELOGV + N) *****SC = O(N)***********

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<pair<int, int>> adj[n+1];
        for(int i=0;i<m;i++)
        {
            int a = edges[i][0];
            int b = edges[i][1];
            int wt = edges[i][2];
            adj[a].push_back({b,wt});
            adj[b].push_back({a,wt});
        }
        vector<int> par(n+1);
        for(int i=1;i<=n;i++)
        {
            par[i] = i;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;
        vector<int> dis(n+1, 1e9);
        dis[1] = 0;
        pq.push({0, 1});
        while(!pq.empty())
        {
            int node = pq.top().second;
            int dist = pq.top().first;
            pq.pop();
            for(auto i:adj[node])
            {
                int newnode = i.first;
                int newdis = i.second;
                if(newdis + dist < dis[newnode])
                {
                    dis[newnode] = newdis+dist;
                    pq.push({dis[newnode], newnode});
                    par[newnode] = node;
                }
            }
        }
        
        if(dis[n] == 1e9)
        {
            return {-1};
        }
        
        vector<int> ans;
        int currnode = n;
        ans.push_back(currnode);
        while(currnode  != 1)
        {
            currnode = par[currnode];
            ans.push_back(currnode);
        }
        reverse(ans.begin(), ans.end());
        return ans;
        
        
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
